package org.apache.ignite.internal.parser;

import java.util.ArrayList;
import java.util.List;
import org.apache.ignite.cache.CacheKeyConfiguration;
import org.apache.ignite.cache.query.SqlFieldsQuery;
import org.apache.ignite.configuration.CacheConfiguration;
import org.apache.ignite.configuration.IgniteConfiguration;
import org.apache.ignite.internal.IgniteEx;
import org.apache.ignite.internal.binary.BinaryMarshaller;
import org.apache.ignite.internal.processors.query.GridQueryProcessor;
import org.apache.ignite.internal.processors.query.IgniteSqlRoutingTest;
import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;
import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder;
import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;

/**
 * Tests for experimental parser generated by ANTLR4.
 */
public class IgniteExperimentalSqlParserIntegrationSelfTest extends GridCommonAbstractTest {
    /** IP finder. */
    private static final TcpDiscoveryVmIpFinder IP_FINDER = new TcpDiscoveryVmIpFinder(true);

    /** */
    private static String NODE_CLIENT = "client";

    /** */
    private static int NODE_COUNT = 4;

    private IgniteEx client;

    /** {@inheritDoc} */
    @Override protected IgniteConfiguration getConfiguration(String gridName) throws Exception {
        IgniteConfiguration c = super.getConfiguration(gridName);

        TcpDiscoverySpi disco = new TcpDiscoverySpi();

        disco.setIpFinder(IP_FINDER);

        c.setDiscoverySpi(disco);

        List<CacheConfiguration> ccfgs = new ArrayList<>();

        //CacheConfiguration ccfg = buildCacheConfiguration(gridName);

        //if (ccfg != null)
//            ccfgs.add(ccfg);

        //ccfgs.add(buildCacheConfiguration(CACHE_PERSON));
        //ccfgs.add(buildCacheConfiguration(CACHE_CALL));

        //c.setCacheConfiguration(ccfgs.toArray(new CacheConfiguration[ccfgs.size()]));

        if (gridName.equals(NODE_CLIENT))
            c.setClientMode(true);

        //c.setCacheKeyConfiguration(new CacheKeyConfiguration(IgniteSqlRoutingTest.CallKey.class));

        return c;
    }


    /** {@inheritDoc} */
    @Override protected void beforeTestsStarted() throws Exception {
        super.beforeTestsStarted();

        startGrids(NODE_COUNT);

        client = (IgniteEx)startGrid(NODE_CLIENT);
    }

    /** {@inheritDoc} */
    @Override protected void afterTestsStopped() throws Exception {
        super.afterTestsStopped();

        stopAllGrids();
    }

    /**
     * @throws Exception if failed.
     */
    public void testDropIndexExperimental() throws Exception {
        GridQueryProcessor queryProc = client.context().query();

        queryProc.querySqlFieldsNoCache(
            new SqlFieldsQuery("CREATE TABLE test(id INT PRIMARY KEY, name CHAR)"), false);

        queryProc.querySqlFieldsNoCache(
            new SqlFieldsQuery("CREATE INDEX \"testIndex\" ON test(name)"), false);

        queryProc.querySqlFieldsNoCache(
            new SqlFieldsQuery("DROP INDEX \"PUBLIC\".\"testIndex\""), false);

        queryProc.querySqlFieldsNoCache(
            new SqlFieldsQuery("CREATE INDEX \"testIndex\" ON test(name)"), false);
    }
}
