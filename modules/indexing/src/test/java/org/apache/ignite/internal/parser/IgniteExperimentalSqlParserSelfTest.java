package org.apache.ignite.internal.parser;

import java.util.List;
import java.util.concurrent.Callable;
import org.apache.ignite.internal.processors.query.IgniteSQLException;
import org.apache.ignite.internal.processors.query.h2.parser.GridExperimentalSqlParser;
import org.apache.ignite.internal.processors.query.h2.sql.GridSqlDropIndex;
import org.apache.ignite.internal.processors.query.h2.sql.GridSqlStatement;
import org.apache.ignite.internal.util.typedef.F;
import org.apache.ignite.testframework.GridTestUtils;
import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;

/**
 * Tests for experimental parser generated by ANTLR4.
 */
public class IgniteExperimentalSqlParserSelfTest extends GridCommonAbstractTest {
    /**
     * @throws Exception if failed.
     */
    public void testParseDropIndexName() throws Exception {
        GridSqlDropIndex cmd = parseSingle("DROP index indexName", GridSqlDropIndex.class);

        assertFalse(cmd.ifExists());
        assertEquals("indexName", cmd.indexName());
        assertEquals("public", cmd.schemaName());
    }

    /**
     * @throws Exception if failed.
     */
    public void testParseDropIndexSchemaIndexName() throws Exception {
        GridSqlDropIndex cmd = parseSingle("DROP index schemaName.indexName", GridSqlDropIndex.class);

        assertFalse(cmd.ifExists());
        assertEquals("indexName", cmd.indexName());
        assertEquals("schemaName", cmd.schemaName());
    }

    /**
     * @throws Exception if failed.
     */
    public void testParseDropIndexIfExists() throws Exception {
        GridSqlDropIndex cmd = parseSingle("DROP index IF exists indexName", GridSqlDropIndex.class);

        assertTrue(cmd.ifExists());
        assertEquals("indexName", cmd.indexName());
        assertEquals("public", cmd.schemaName());
    }

    /**
     * @throws Exception if failed.
     */
    public void testParseDropIndexQuotedSchemaName() throws Exception {
        GridSqlDropIndex cmd = parseSingle("DROP index \"schemaName\".indexName", GridSqlDropIndex.class);

        assertFalse(cmd.ifExists());
        assertEquals("indexName", cmd.indexName());
        assertEquals("schemaName", cmd.schemaName());
    }

    /**
     * @throws Exception if failed.
     */
    public void testParseDropIndexQuoted() throws Exception {
        GridSqlDropIndex cmd = parseSingle("DROP index \"schemaName\".\"indexName\"", GridSqlDropIndex.class);

        assertFalse(cmd.ifExists());
        assertEquals("indexName", cmd.indexName());
        assertEquals("schemaName", cmd.schemaName());
    }

    /**
     * @throws Exception if failed.
     */
    public void testParseMultipleDropIndex() throws Exception {
        List<GridSqlStatement> res = parseMultiple("drop index if exists indexName1; drop index schemaName.indexName2");

        assertNotNull(res);

        assertEquals(2, res.size());

        GridSqlDropIndex cmd = (GridSqlDropIndex)res.get(0);

        assertTrue(cmd.ifExists());
        assertEquals("indexName1", cmd.indexName());
        assertEquals("public", cmd.schemaName());

        cmd = (GridSqlDropIndex)res.get(1);

        assertFalse(cmd.ifExists());
        assertEquals("indexName2", cmd.indexName());
        assertEquals("schemaName", cmd.schemaName());
    }

    /**
     * @throws Exception if failed.
     */
    public void testParseErrorUnsupported() throws Exception {
        GridTestUtils.assertThrows(log, new Callable<Object>() {
            @Override public Object call() throws Exception {
                return parseSingle("DROP TABLE tableName", GridSqlStatement.class);
            }
        }, IgniteSQLException.class,
            "SyntaxError: line 1: position 5: no viable alternative at input 'DROP TABLE': DROP [*]TABLE tableName");
    }

    /**
     * @throws Exception if failed.
     */
    public void testParseErrorUnexpectedToken() throws Exception {
        GridTestUtils.assertThrows(log, new Callable<Object>() {
            @Override public Object call() throws Exception {
                return parseSingle("DROP INDEX DROP", GridSqlStatement.class);
            }
        }, IgniteSQLException.class,
            "SyntaxError: line 1: position 11: no viable alternative at input 'DROP INDEX DROP': DROP INDEX [*]DROP");
    }

    /**
     * @throws Exception if failed.
     */
    public void testParseErrorFromLexer() throws Exception {
        GridTestUtils.assertThrows(log, new Callable<Object>() {
            @Override public Object call() throws Exception {
                return parseSingle("DROP INDEX -1234", GridSqlStatement.class);
            }
        }, IgniteSQLException.class,
            "SyntaxError: line 1: position 11: token recognition error at: '-': DROP INDEX [*]-1234");
    }

    /**
     * ANTLR Bug reproducer.
     *
     * @throws Exception if failed.
     */
    public void testParseErrorInAntlr() throws Exception {
        GridTestUtils.assertThrows(log, new Callable<Object>() {
            @Override public Object call() throws Exception {
                return parseSingle("DROP INDEX \"schemaName\".\"indexName ", GridSqlStatement.class);
            }
        }, IgniteSQLException.class, "");
    }

    /**
     * Parse SQL expecting single statement of certain class.
     *
     * @param text SQL text.
     * @param expClass class of result to expect.
     * @param <T> class of result to expect.
     * @return SQL statement.
     */
    private <T extends GridSqlStatement> T parseSingle(String text, Class<T> expClass) {
        List<GridSqlStatement> result = new GridExperimentalSqlParser(text).parse();

        assertNotNull(result);

        assertEquals(1, result.size());

        assertTrue(expClass.isInstance(result.get(0)));

        return (T)result.get(0);
    }

    /**
     * Parse text expecting multiple statements.
     *
     * @param text SQL text.
     * @return List of SQL statements.
     */
    private List<GridSqlStatement> parseMultiple(String text) {
        List<GridSqlStatement> result = new GridExperimentalSqlParser(text).parse();

        assertNotNull(result);

        assertFalse(F.isEmpty(result));

        return result;
    }




}
