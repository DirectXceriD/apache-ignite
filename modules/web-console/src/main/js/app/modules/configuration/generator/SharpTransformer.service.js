/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import _ from 'lodash';
import StringBuilder from './StringBuilder';

const dateOptions = {
    month: '2-digit',
    day: '2-digit',
    year: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    hour12: false
};

export default ['PlatformGenerator', (generator) => {
    return class SharpTransformer {
        static commentBlock(sb, ...lines) {
            _.forEach(lines, (line) => sb.append(`// ${line}`));
        }

        static doc(sb, ...lines) {
            sb.append('/// <summary>');
            _.forEach(lines, (line) => sb.append(`/// ${line}`));
            sb.append('/// </summary>');
        }

        static mainComment(sb) {
            return this.doc(sb, `This configuration was generated by Ignite Web Console (${new Date().toLocaleString('en-US', dateOptions)})`);
        }

        /**
         *
         * @param {Array.<String>} sb
         * @param {Bean} bean
         */
        static _defineBean(sb, bean) {
            const shortClsName = this.shortClassName(bean.clsName);

            sb.append(`var ${bean.id} = new ${shortClsName}();`);
        }

        /**
         * @param {StringBuilder} sb
         * @param {Bean} parent
         * @param {Bean} propertyName
         * @param {String|Bean} value
         * @private
         */
        static _setProperty(sb, parent, propertyName, value) {
            sb.append(`${parent.id}.${propertyName} = ${value};`);
        }

        /**
         *
         * @param {StringBuilder} sb
         * @param {Bean} parent
         * @param {String} propertyName
         * @param {Bean} bean
         * @private
         */
        static _setBeanProperty(sb, parent, propertyName, bean) {
            sb.append(`${parent.id}.${propertyName} = ${bean.id};`);
        }

        static shortClassName(clsName) {
            const dotIdx = clsName.lastIndexOf('.');

            return dotIdx > 0 ? clsName.substr(dotIdx + 1) : clsName;
        }

        /**
         *
         * @param {StringBuilder} sb
         * @param {Bean} bean
         * @returns {Array}
         */
        static _setProperties(sb = new StringBuilder(), bean) {
            _.forEach(bean.properties, (prop) => {
                switch (prop.type) {
                    case 'BEAN':
                        const nestedBean = prop.value;

                        this._defineBean(sb, nestedBean);

                        sb.emptyLine();

                        this._setProperties(sb, nestedBean);

                        sb.emptyLine();

                        this._setBeanProperty(sb, bean, prop.name, nestedBean);

                        break;

                    case 'ENUM':
                        const value = `${this.shortClassName(prop.clsName)}.${prop.mapper(prop.value)}`;

                        this._setProperty(sb, bean, prop.name, value);

                        break;

                    default:
                        this._setProperty(sb, bean, prop.name, prop.value);
                }
            });

            return sb;
        }

        /**
         * Build Java startup class with configuration.
         *
         * @param {Bean} cfg
         * @param pkg Package name.
         * @param clsName Class name for generate factory class otherwise generate code snippet.
         * @param clientNearCfg Optional near cache configuration for client node.
         * @returns {String}
         */
        static toClassFile(cfg, pkg, clsName, clientNearCfg) {
            const sb = new StringBuilder();

            sb.startBlock(`namespace ${pkg}`, '{');

            _.forEach(_.sortBy(cfg.collectClasses()), (cls) => sb.append(`using ${cls};`));
            sb.emptyLine();


            this.mainComment(sb);
            sb.startBlock(`public class ${clsName}`, '{');

            this.doc(sb, 'Configure grid.');
            sb.startBlock('public static IgniteConfiguration CreateConfiguration()', '{');

            this._defineBean(sb, cfg);

            sb.emptyLine();

            this._setProperties(sb, cfg);

            sb.emptyLine();

            sb.append(`return ${cfg.id};`);

            sb.endBlock('}');

            sb.endBlock('}');

            sb.endBlock('}');

            return sb.asString();
        }

        static generateSection(bean) {
            const sb = new StringBuilder();

            this._setProperties(sb, bean);

            return sb.asString();
        }

        static clusterGeneral(cluster, clientNearCfg, res) {
            return $generatorJava.clusterGeneral(cluster, clientNearCfg, res);
        }

        static clusterCaches(caches, igfss, isSrvCfg, res) {
            return $generatorJava.clusterCaches(caches, igfss, isSrvCfg, res);
        }

        // Generate atomics group.
        static clusterAtomics(atomics, sb = new StringBuilder()) {
            const cfg = generator.clusterAtomics(atomics);

            this._setProperties(sb, cfg);

            return sb;
        }
    };
}];
