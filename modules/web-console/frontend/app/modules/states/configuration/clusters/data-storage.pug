//-
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

include /app/helpers/jade/mixins

-var form = 'dataStorageConfiguration'
-var model = 'backupItem.dataStorageConfiguration'
-var dfltRegionModel = model + '.defaultDataRegionConfiguration'
-var memoryPolicies = model + '.dataRegionConfigurations'

.panel.panel-default(ng-show='$ctrl.available("2.3.0")' ng-form=form novalidate)
    .panel-heading(bs-collapse-toggle ng-click=`ui.loadPanel('${form}')`)
        ignite-form-panel-chevron
        label Data storage configuration
        ignite-form-field-tooltip.tipLabel
            | Page memory is a manageable off-heap based memory architecture that is split into pages of fixed size#[br]
            | #[a(href="https://apacheignite.readme.io/docs/durable-memory" target="_blank") More info]
        ignite-form-revert
    .panel-collapse(role='tabpanel' bs-collapse-target id=`${form}`)
        .panel-body(ng-if=`$ctrl.available("2.3.0") && ui.isPanelLoaded('${form}')`)
            .col-sm-6
                .settings-row
                    +number-min-max('Page size:', model + '.pageSize', '"MemoryConfigurationPageSize"',
                    'true', '2048', '1024', '16384', 'Every memory region is split on pages of fixed size')
                .settings-row
                    +number('Concurrency level:', model + '.concurrencyLevel', '"MemoryConfigurationConcurrencyLevel"',
                    'true', 'availableProcessors', '2', 'The number of concurrent segments in Ignite internal page mapping tables')
                .settings-row
                    +ignite-form-group
                        ignite-form-field-label
                            | System region
                        ignite-form-group-tooltip
                            | System region properties
                        .group-content
                            .details-row
                                +number('Initial size:', model + '.systemRegionInitialSize', '"systemRegionInitialSize"',
                                'true', '41943040', '10485760', 'Initial size of a data region reserved for system cache')
                            .details-row
                                +number('Maximum size:', model + '.systemRegionMaxSize', '"systemRegionMaxSize"',
                                'true', '104857600', '10485760', 'Maximum data region size reserved for system cache')
                .settings-row
                    +ignite-form-group
                        ignite-form-field-label
                            | Memory policies
                        ignite-form-group-tooltip
                            | Memory policies configuration
                        .group-content
                            .details-row
                                +text('Default memory policy name:', model + '.defaultMemoryPolicyName', '"defaultMemoryPolicyName"',
                                'false', 'default', 'Name of a memory policy to be used as default one')
                            .details-row(ng-hide='(' + model + '.defaultMemoryPolicyName || "default") !== "default"')
                                +number('Default memory policy size:', model + '.defaultMemoryPolicySize', '"defaultMemoryPolicySize"',
                                'true', '0.8 * totalMemoryAvailable', '10485760',
                                'Specify desired size of default memory policy without having to use more verbose syntax of MemoryPolicyConfiguration elements')
                            .details-row(ng-init='memoryPoliciesTbl={type: "memoryPolicies", model: "memoryPolicies", focusId: "name", ui: "memory-policies-table"}')
                                +ignite-form-group()
                                    ignite-form-field-label
                                        | Configured policies
                                    ignite-form-group-tooltip
                                        | List of configured policies
                                    ignite-form-group-add(ng-click='tableNewItem(memoryPoliciesTbl)')
                                        | Add Memory policy configuration
                                    .group-content-empty(ng-if=`!(${memoryPolicies} && ${memoryPolicies}.length > 0)`)
                                        | Not defined
                                    .group-content(ng-show=`${memoryPolicies} && ${memoryPolicies}.length > 0` ng-repeat=`model in ${memoryPolicies} track by $index`)
                                        hr(ng-if='$index != 0')
                                        .settings-row
                                            +text-enabled-autofocus('Name:', 'model.name', '"MemoryPolicyName" + $index', 'true', 'false', 'default', 'Memory policy name')
                                                +table-remove-button(memoryPolicies, 'Remove memory configuration')
                                        .settings-row
                                            +number('Initial size:', 'model.initialSize', '"MemoryPolicyInitialSize" + $index',
                                            'true', '268435456', '10485760', 'Initial memory region size defined by this memory policy')
                                        .settings-row
                                            +number('Maximum size:', 'model.maxSize', '"MemoryPolicyMaxSize" + $index',
                                            'true', '0.8 * totalMemoryAvailable', '10485760', 'Maximum memory region size defined by this memory policy')
                                        .settings-row
                                            +text('Swap file path:', 'model.swapFilePath', '"MemoryPolicySwapFilePath" + $index', 'false',
                                            'Input swap file path', 'An optional path to a memory mapped file for this memory policy')
                                        .settings-row
                                            +dropdown('Eviction mode:', 'model.pageEvictionMode', '"MemoryPolicyPageEvictionMode"', 'true', 'DISABLED',
                                            '[\
                                                {value: "DISABLED", label: "DISABLED"},\
                                                {value: "RANDOM_LRU", label: "RANDOM_LRU"},\
                                                {value: "RANDOM_2_LRU", label: "RANDOM_2_LRU"}\
                                            ]',
                                            'An algorithm for memory pages eviction\
                                            <ul>\
                                                <li>DISABLED - Eviction is disabled</li>\
                                                <li>RANDOM_LRU - Once a memory region defined by a memory policy is configured, an off - heap array is allocated to track last usage timestamp for every individual data page</li>\
                                                <li>RANDOM_2_LRU - Differs from Random - LRU only in a way that two latest access timestamps are stored for every data page</li>\
                                            </ul>')
                                        .settings-row
                                            +number-min-max-step('Eviction threshold:', 'model.evictionThreshold', '"MemoryPolicyEvictionThreshold" + $index',
                                            'true', '0.9', '0.5', '0.999', '0.05', 'A threshold for memory pages eviction initiation')
                                        .settings-row
                                            +number('Empty pages pool size:', 'model.emptyPagesPoolSize', '"MemoryPolicyEmptyPagesPoolSize" + $index',
                                            'true', '100', '11', 'The minimal number of empty pages to be present in reuse lists for this memory policy')
                                        .settings-row
                                            +number('Sub intervals:', 'model.subIntervals', '"MemoryPolicySubIntervals" + $index',
                                                'true', '5', '1', 'A number of sub-intervals the whole rate time interval will be split into to calculate allocation and eviction rates')
                                        .settings-row
                                            +number('Rate time interval:', 'model.rateTimeInterval', '"MemoryPolicyRateTimeInterval" + $index',
                                                'true', '60000', '1000', 'Time interval for allocation rate and eviction rate monitoring purposes')
                                        .settings-row
                                            +checkbox('Metrics enabled', 'model.metricsEnabled', '"MemoryPolicyMetricsEnabled" + $index',
                                            'Whether memory metrics are enabled by default on node startup')

                .settings-row
                    +text-enabled('Store path:', `${model}.persistentStorePath`, '"PersistenceStorePath"', 'true', 'false', 'Input store path',
                    'A path the root directory where the Persistent Store will persist data and indexes')
                .settings-row
                    +checkbox-enabled('Metrics enabled', `${model}.metricsEnabled`, '"PersistenceMetricsEnabled"', 'true', 'Flag indicating whether persistence metrics collection is enabled')
                .settings-row
                    +checkbox-enabled('Always write full pages', `${model}.alwaysWriteFullPages`, '"PersistenceAlwaysWriteFullPages"', 'true', 'Flag indicating whether always write full pages')
                .settings-row
                    +number('Checkpointing frequency:', `${model}.checkpointingFrequency`, '"PersistenceCheckpointingFrequency"', 'true', '180000', '1',
                    'Frequency which is a minimal interval when the dirty pages will be written to the Persistent Store')
                .settings-row
                    +number('Checkpointing page buffer size:', `${model}.checkpointingPageBufferSize`, '"PersistenceCheckpointingPageBufferSize"', 'true', '268435456', '0',
                    'Amount of memory allocated for a checkpointing temporary buffer')
                .settings-row
                    +number('Checkpointing threads:', `${model}.checkpointingThreads`, '"PersistenceCheckpointingThreads"', 'true', '1', '1', 'A number of threads to use for the checkpointing purposes')
                .settings-row
                    +text-enabled('WAL store path:', `${model}.walStorePath`, '"PersistenceWalStorePath"', 'true', 'false', 'Input store path', 'A path to the directory where WAL is stored')
                .settings-row
                    +text-enabled('WAL archive path:', `${model}.walArchivePath`, '"PersistenceWalArchivePath"', 'true', 'false', 'Input archive path', 'A path to the WAL archive directory')
                .settings-row
                    +number('WAL segments:', `${model}.walSegments`, '"PersistenceWalSegments"', 'true', '10', '1', 'A number of WAL segments to work with')
                .settings-row
                    +number('WAL segment size:', `${model}.walSegmentSize`, '"PersistenceWalSegmentSize"', 'true', '67108864', '0', 'Size of a WAL segment')
                .settings-row
                    +number('WAL history size:', `${model}.walHistorySize`, '"PersistenceWalHistorySize"', 'true', '20', '1', 'A total number of checkpoints to keep in the WAL history')
                .settings-row
                    +number('WAL flush frequency:', `${model}.walFlushFrequency`, '"PersistenceWalFlushFrequency"', 'true', '2000', '1',
                    'How often will be fsync, in milliseconds. In background mode, exist thread which do fsync by timeout')
                .settings-row
                    +number('WAL fsync delay:', `${model}.walFsyncDelayNanos`, '"PersistenceWalFsyncDelay"', 'true', '1000', '1', 'WAL fsync delay, in nanoseconds')
                .settings-row
                    +number('WAL record iterator buffer size:', `${model}.walRecordIteratorBufferSize`, '"PersistenceWalRecordIteratorBufferSize"', 'true', '67108864', '1',
                    'How many bytes iterator read from disk(for one reading), during go ahead WAL')
                .settings-row
                    +number('Lock wait time:', `${model}.lockWaitTime`, '"PersistenceLockWaitTime"', 'true', '10000', '1',
                    'Time out in second, while wait and try get file lock for start persist manager')
                .settings-row
                    +number('Rate time interval:', `${model}.rateTimeInterval`, '"PersistenceRateTimeInterval"', 'true', '60000', '1000',
                    'The length of the time interval for rate - based metrics. This interval defines a window over which hits will be tracked.')
                .settings-row
                    +number('Thread local buffer size:', `${model}.tlbSize`, '"PersistenceTlbSize"', 'true', '131072', '1',
                    'Define size thread local buffer. Each thread which write to WAL have thread local buffer for serialize recode before write in WAL')
                .settings-row
                    +number('Sub intervals:', `${model}.subIntervals`, '"PersistenceSubIntervals"', 'true', '5', '1',
                    'Number of sub - intervals the whole rate time interval will be split into to calculate rate - based metrics')
            .col-sm-6
                +preview-xml-java(model, 'clusterMemory')
