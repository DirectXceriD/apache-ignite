main:
  - drop
  - join
  - create
  - join
  - load
  - join
  - check
  - join
  - select
  - join
  - drop

drop:
  -
    iterator: >
      $1 = range 1, 5;
    h2: DROP TABLE IF EXISTS t$1
    ignite: pass

create:
  -
    iterator: >
      $1 = range 1, 5;
      $2 = Class.toSqlString $1, 'createFields'
    h2: CREATE TABLE t$1 (id INT NOT NULL PRIMARY KEY, $2)
    ignite: IGNITE CLEAR CACHE
    .cache_name: t$1

load:
  -
    iterator: >
      $1 = range 1, 5;
      $2 = mrange 1, 11;
      $3 = Class.toSqlString $2, 'InsertFields';
      $4 = Class.toSqlString $2, 'InsertValues';
    h2: INSERT INTO t$1 (id, $3) VALUES ($2, $4)
    ignite: IGNITE PUT ENTRY $2
    .cache_name: t$1

check:
  -
    iterator: >
      $1 = range 1, 5;
    h2: SELECT COUNT(*) FROM t$1
    ignite: IGNITE SHOW CACHE SIZE
    .cache_name: t$1

join:
  -
    join: true
    h2: pass
    ignite: pass

select:
  - SELECT fields from_any where orderby
  - SELECT aggr_fields from_any sort
  - SELECT fields_join from_join where_aliased sort
  - SELECT COUNT(*) from_partition_caches where_non_collocated sort
  - SELECT COUNT(*) from_local where sort


fields:
  - col_Long_1
  - col_Boolean_1
  - col_Long_1, col_Long_2, col_String_1
  - col_Date_2, col_Time_4

fields_join:
  - a.col_Boolean_1, a.col_Long_1, b.col_Long_3, b.col_String_1

aggr_fields:
 - COUNT(*)
 - MIN(col_Long_2)
 - MAX(col_Short_1)

aggr_fields_group:
 - COUNT(col_Long_2), col_Long_2

from_any:
  -
    iterator: >
      $1 = range 1, 5;
      $2 = Class.toSqlString $1, 'name';
    h2: FROM t$1
    ignite: FROM $2
    .cache_name: t$1

from_join:
  -
    iterator: >
      $1 = range 1, 4;
      $2 = Class.toSqlString $1, 'name';
    h2: FROM t$1 AS a JOIN t4 AS b ON a.col_Long_1 = b.col_Long_3
    ignite: FROM $2 AS a JOIN \"t4\".$2 AS b ON a.col_Long_1 = b.col_Long_3
    .cache_name: t$1

from_partition_caches:
  -
    h2: FROM t1 AS a, t2 AS b
    ignite: FROM DefaultTable AS a,\"t2\".DefaultTable AS b
    .cache_name: t1
    .distributed_joins: true

from_local:
  -
    iterator: >
      $1 = range 3, 5;
      $2 = Class.toSqlString $1, 'name';
    h2: FROM t$1
    ignite: FROM $2
    .cache_name: t$1
    .setlocal: true

where:
  -
    h2: WHERE col_Long_2 < -2
    ignite: WHERE col_Long_2 < -2
    #.args: -20
  - WHERE col_String_1 LIKE '%_3%'

where_non_collocated:
  -
    WHERE a.col_Long_1 = ABS(b.col_Long_2)
  -
    WHERE a.col_Long_1 = ABS(b.col_Long_3)
  -
    WHERE a.col_Long_1 = ABS(b.col_Long_4)

groupby:
  - GROUP BY col_Long_2

where_aliased:
  - WHERE a.col_Boolean_1 = 'TRUE'

orderby:
  - ORDER BY col_Long_2
  - ORDER BY col_Long_2 DESC

sort:
  -
    h2: pass
    ignite: pass
    sort: true